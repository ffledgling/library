2015-03-09
==========

Average accuracy
----------------
tail -n+127 results-1425862054.txt | grep -P -o '0\.\d+' | awk '{sum += $1} END{print sum/126}'
0.842727

Maximum accuracy
----------------
tail -n+127 results-1425862054.txt | grep -P -o '0\.\d+' | tail -1
0.95047301057317757

Minimum accuracy
----------------
tail -n+127 results-1425862054.txt | grep -P -o '0\.\d+' | head -1
0.64162493043962154

2015-03-11
==========

(Value: 0.99529165576772172 Accuracy: 0.99529165576772172, Balance: 0.2, Overlap: None, Margin: None, Partition: (set([0]), set([1, 2, 3, 4, 5, 6, 7, 8, 9])))

Best Accuracy: 0.995291655768
Highest Value: 0.995291655768
Average Accuracy: 0.93825675008
Average Value: 0.93825675008

2015-03-13
==========

Results with a well balanced tree, using 'value' as the split driver
Varies b/w 87-90.5% (rare occasions go down to 85%)

set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) -> (0.973029045643)
	set([8, 1, 2, 4, 6]) -> (0.979338842975)
		set([8, 1, 2]) -> (1.0)
			set([8, 1]) -> (0.958762886598)
				None
				None
			None
		set([4, 6]) -> (1.0)
			None
			None
	set([0, 9, 3, 5, 7]) -> (0.995833333333)
		set([9, 3, 7]) -> (0.986301369863)
			None
			set([3, 7]) -> (0.989795918367)
				None
				None
		set([0, 5]) -> (1.0)
			None
			None
Correctly labeled classes 1630/1797
Accuracy: 0.907067334446

Results from an unbalanced tree, using 'accuracy' as the split driver
Averages a slightly higher 92%

set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) -> (0.997925311203)
	None
	set([1, 2, 3, 4, 5, 6, 7, 8, 9]) -> (0.993103448276)
		None
		set([1, 2, 3, 5, 6, 7, 8, 9]) -> (0.997409326425)
			set([1, 2, 3, 5, 7, 8, 9]) -> (0.997041420118)
				set([1, 2, 3, 7, 8, 9]) -> (0.993127147766)
					set([8, 1, 2, 3, 9]) -> (0.99173553719)
						set([8, 1, 3, 9]) -> (0.994845360825)
							None
							set([8, 9, 1]) -> (0.993103448276)
								set([8, 1]) -> (0.958762886598)
									None
									None
								None
						None
					None
				None
			None
Correctly labeled classes 1664/1797
Accuracy: 0.925987757373

2015-03-15
==========

Added overlap
Added baseline checks.
Tree uses only accuracy*balance

Working with the partition: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
Overlapping Classes set([])
Working with the partition: set([8, 1, 2, 4, 6])
Overlapping Classes set([1])
Working with the partition: set([8, 1, 2])
Overlapping Classes set([])
Working with the partition: set([8, 1])
Overlapping Classes set([1])
Working with the partition: set([1, 4, 6])
Overlapping Classes set([1])
Working with the partition: set([1, 4])
Overlapping Classes set([1])
Working with the partition: set([1, 6])
Overlapping Classes set([])
Working with the partition: set([0, 9, 3, 5, 7])
Overlapping Classes set([])
Working with the partition: set([9, 3, 7])
Overlapping Classes set([])
Working with the partition: set([3, 7])
Overlapping Classes set([])
Working with the partition: set([0, 5])
Overlapping Classes set([])
set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) -> (0.979253112033, set([]))
	set([8, 1, 2, 4, 6]) -> (0.979338842975, set([1]))
		set([8, 1, 2]) -> (1.0, set([]))
			set([8, 1]) -> (0.958762886598, set([1]))
				None
				None
			None
		set([1, 4, 6]) -> (0.993150684932, set([1]))
			set([1, 4]) -> (0.989795918367, set([1]))
				None
				None
			set([1, 6]) -> (1.0, set([]))
				None
				None
	set([0, 9, 3, 5, 7]) -> (0.995833333333, set([]))
		set([9, 3, 7]) -> (0.986301369863, set([]))
			None
			set([3, 7]) -> (0.989795918367, set([]))
				None
				None
		set([0, 5]) -> (1.0, set([]))
			None
			None
Correctly labeled classes 1611/1797
Accuracy: 0.896494156928

Base Line accuraccies:
QDA: 0.702838063439
LDA: 0.938786867001
SVC: 0.56204785754
DecisionTreeClassifier: 0.856427378965
RandomForestClassifier: 0.948247078464
GaussianNB: 0.728992765721
AdaBoostClassifier: 0.685587089594
One Vs. Rest: 0.87979966611

---------

Objective function uses accuracy, balance and overlap

Working with the partition: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
Overlapping Classes set([0, 1])
Working with the partition: set([0, 1, 4])
Overlapping Classes set([1])
Working with the partition: set([0, 4])
Overlapping Classes set([])
Working with the partition: set([0, 1, 2, 3, 5, 6, 7, 8, 9])
Overlapping Classes set([])
Working with the partition: set([1, 2, 3, 5, 6, 7, 8, 9])
Overlapping Classes set([])
Working with the partition: set([1, 5, 6, 7, 8, 9])
Overlapping Classes set([1])
Working with the partition: set([8, 1, 6])
Overlapping Classes set([1])
Working with the partition: set([8, 1])
Overlapping Classes set([1])
Working with the partition: set([1, 6])
Overlapping Classes set([])
Working with the partition: set([9, 1, 5, 7])
Overlapping Classes set([])
Working with the partition: set([9, 5, 7])
Overlapping Classes set([])
Working with the partition: set([9, 7])
Overlapping Classes set([])
Working with the partition: set([2, 3])
Overlapping Classes set([])
set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) -> (0.98132780083, set([0, 1]))
	set([0, 1, 4]) -> (0.979310344828, set([1]))
		set([0, 4]) -> (1.0, set([]))
			None
			None
		None
	set([0, 1, 2, 3, 5, 6, 7, 8, 9]) -> (0.997690531178, set([]))
		None
		set([1, 2, 3, 5, 6, 7, 8, 9]) -> (0.966321243523, set([]))
			set([1, 5, 6, 7, 8, 9]) -> (0.98615916955, set([1]))
				set([8, 1, 6]) -> (0.937931034483, set([1]))
					set([8, 1]) -> (0.958762886598, set([1]))
						None
						None
					set([1, 6]) -> (1.0, set([]))
						None
						None
				set([9, 1, 5, 7]) -> (1.0, set([]))
					set([9, 5, 7]) -> (1.0, set([]))
						set([9, 7]) -> (0.979381443299, set([]))
							None
							None
						None
					None
			set([2, 3]) -> (1.0, set([]))
				None
				None
Correctly labeled classes 1652/1797
Accuracy: 0.919309961046

Base Line accuraccies:
QDA: 0.702838063439
LDA: 0.938786867001
SVC: 0.56204785754
DecisionTreeClassifier: 0.857540345019
RandomForestClassifier: 0.946021146355
GaussianNB: 0.728992765721
AdaBoostClassifier: 0.685587089594
One Vs. Rest: 0.87979966611

----

Parallel run on hand-written digit dataset

Correctly labeled classes 1883/4000
Accuracy: 0.47075
set(['A', 'C', 'B', 'E', 'D', 'G', 'F', 'I', 'H', 'K', 'J', 'M', 'L', 'O', 'N', 'Q', 'P', 'S', 'R', 'U', 'T', 'W', 'V', 'Y', 'X', 'Z']) -> (0.689706613625, set([]))
    set(['A', 'F', 'I', 'J', 'M', 'N', 'S', 'T', 'W', 'V', 'Y', 'X', 'Z']) -> (0.902874132805, set([]))
        set(['A', 'W', 'V', 'Y', 'M', 'N']) -> (0.96218487395, set([]))
            set(['A', 'Y', 'V']) -> (0.979166666667, set([]))
                None
                set(['Y', 'V']) -> (0.96875, set([]))
                    None
                    None
            set(['M', 'W', 'N']) -> (0.974576271186, set([]))
                set(['M', 'N']) -> (0.955974842767, set([]))
                    None
                    None
                None
        set(['S', 'Z', 'T', 'F', 'I', 'X', 'J']) -> (0.861163227017, set([]))
            set(['I', 'S', 'J', 'T', 'F']) -> (0.913612565445, set([]))
                set(['I', 'J', 'T', 'F']) -> (0.954545454545, set([]))
                    set(['I', 'T', 'F']) -> (0.969957081545, set([]))
                        None
                        set(['T', 'F']) -> (0.930817610063, set([]))
                            None
                            None
                    None
                None
            set(['X', 'Z']) -> (1.0, set([]))
                None
                None
    set(['C', 'B', 'E', 'D', 'G', 'H', 'K', 'L', 'O', 'Q', 'P', 'R', 'U']) -> (0.908183632735, set([]))
        set(['C', 'E', 'G', 'H', 'K', 'L', 'O', 'Q', 'U']) -> (0.938953488372, set([]))
            set(['C', 'G', 'H', 'K', 'L', 'O', 'Q', 'U']) -> (0.833060556465, set([]))
                set(['C', 'U', 'K']) -> (0.865800865801, set([]))
                    set(['C', 'K']) -> (0.886666666667, set([]))
                        None
                        None
                    None
                set(['Q', 'H', 'O', 'L', 'G']) -> (0.910526315789, set([]))
                    set(['Q', 'L', 'G']) -> (0.904347826087, set([]))
                        None
                        set(['L', 'G']) -> (0.941176470588, set([]))
                            None
                            None
                    set(['H', 'O']) -> (0.726666666667, set([]))
                        None
                        None
            None
        set(['P', 'R', 'B', 'D']) -> (0.90127388535, set([]))
            None
            set(['B', 'R', 'D']) -> (0.918803418803, set([]))
                set(['B', 'D']) -> (0.968553459119, set([]))
                    None
                    None
                None

real    325m51.080s
user    22m38.424s
sys     0m3.744s

Latin.optimized:
real    46m29.506s
user    150m38.472s
sys     0m43.949s

Yes, the "optimized" code ran slower...

Latin.not-optimized:
real    45m33.127s
user    150m24.475s
sys     0m39.720s
